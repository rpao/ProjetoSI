package ProjetoSI;

import ProjetoSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;

// Consultar ações na lista de ações
query "consulta_acoes"
	acao: Acao()
end

// Dados do alvo selecionado
declare Alvo
	nome: String
	x: double
	y: double
	distancia: double
end

// Excluí ações com prioridades conflitantes
rule "DEPURAR ACOES"
	when
		$acao: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2);
		System.out.println("> Depurar acoes por prioridade");
end

// Gira o radar quando não há envento escaneado ou alvo selecionado
rule 'GIRAR RADAR'
	when
		not (exists ScannedRobotEvent())
		not (exists Alvo())
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 2));
		System.out.println("> Girar radar");
end

// Seleciona o alvo, através do radar, obter as suas informações e 
// ajusta a mira.
rule "ESCOLHER ALVO"
	when
		not (exists Alvo())
		$alvoEscaneado: ScannedRobotEvent()
		$status : EstadoRobot()
	then
		Alvo alvo = new Alvo();
		
		double anguloAbsoluto = Util.anguloAbsoluto($status.getHeading(), $alvoEscaneado.getBearing());
		alvo.setNome($alvoEscaneado.getName());
		alvo.setX(Util.calcularX($status.getX(), anguloAbsoluto, $alvoEscaneado.getDistance()));                                            
		alvo.setY(Util.calcularX($status.getY(), anguloAbsoluto, $alvoEscaneado.getDistance()));
		alvo.setDistancia($alvoEscaneado.getDistance());
		insert(alvo);

		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));		
		System.out.println("> Alvo Selecionado: "+$alvoEscaneado.getName());
end

// Encontrar a posição do alvo e ajustar a mira
rule "LOCALIZAR ALVO"
	when
		$dadosAlvo: Alvo($nomeAlvo: nome)
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent(name == $nomeAlvo)
	then
		double anguloAbsoluto = Util.anguloAbsoluto($status.getHeading(), $alvoEscaneado.getBearing());
		$dadosAlvo.setX(Util.calcularX($status.getX(), anguloAbsoluto, $alvoEscaneado.getDistance()));                                            
		$dadosAlvo.setY(Util.calcularX($status.getY(), anguloAbsoluto, $alvoEscaneado.getDistance()));
		$dadosAlvo.setDistancia($alvoEscaneado.getDistance());
		
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Localizar Alvo");
end

// Dispara contra o alvo na mira
rule "DISPARAR"
   when
		$status : EstadoRobot()
		Alvo ($nomeAlvo: nome)
		ScannedRobotEvent(name == $nomeAlvo, $anguloRelativoAlvo: bearing)                       
		eval (Math.abs($anguloRelativoAlvo - Util.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 1));
		System.out.println("> Disparando contra "+$nomeAlvo);
end

// Quando o alvo é destruído, limpa as informações para adquirir um novo alvo
rule "ALVO DESTRUIDO"
	when
	   $alvo: Alvo ($nomeAlvo: nome)
	   RobotDeathEvent( name == $nomeAlvo ) || HitByBulletEvent()
	then 
	   retract($alvo);
	   System.out.println("> "+$nomeAlvo + " DESTRUIDO.");
end

/*
// Apenas movimenta o corpo sempre para a direita -> faz com que se movimente em circulo
// tem prioridade alta
rule "MOVIMENTAR-SE"
	when
		HitByBulletEvent()
		$status : EstadoRobot()
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, 10000, 1));
		insert(new Acao(Acao.AVANCAR, 10000, 1));
		System.out.println("> Fui atingido > Girar...");
end

// Quando ocorre um choque com o muro: se movimenta para o lado oposto
// tem prioridade alta
rule "CHOQUE"
	when
		HitWallEvent($anguloRelativo: bearing) || HitRobotEvent($nome: name, $anguloRelativo: bearing)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, -$anguloRelativo, 5));
		insert(new Acao(Acao.AVANCAR, 1000, 5));
		System.out.println("> Choque");
end
*/