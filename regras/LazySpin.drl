package ProjetoSI;

import ProjetoSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;

// Consultar ações na lista de ações
query "consulta_acoes"
	acao: Acao()
end

// Excluí ações com prioridades conflitantes
rule "DEPURAR ACOES"
	when
		$acao: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2);
		System.out.println("> Depurar acoes por prioridade");
end

rule 'GIRAR'
	when
		EstadoRobot( distanceRemaining == 0 )
		$batalha: EstadoBatalha()
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, 360, 1));
		insert(new Acao(Acao.VELOCIDADE, 5, 1));
		insert(new Acao(Acao.AVANCAR, 1000, 1));
		System.out.println("> Girar...");
end

// Dispara contra o alvo na mira
rule "DISPARAR"
   when
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent($nomeAlvo: name, $anguloRelativo: bearing)
		eval (Math.abs($anguloRelativo - Util.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 10)   
   then	
		/*
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Mirar...");
		*/
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Disparar Contra "+$nomeAlvo);
end 