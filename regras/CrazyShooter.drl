package ProjetoSI;

import ProjetoSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;

// Consultar ações na lista de ações
query "consulta_acoes"
	acao: Acao()
end

// Excluí ações com prioridades conflitantes
rule "DEPURAR ACOES"
	when
		$acao: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2);
		System.out.println("> Depurar acoes por prioridade");
end

// Gira o radar quando não há envento escaneado ou alvo selecionado
rule 'GIRAR RADAR'
	when
		not (exists ScannedRobotEvent())
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 5));
		System.out.println("> Girar radar");
end

// Dispara contra o alvo na mira
rule "DISPARAR"
   when
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent($nomeAlvo: name)
   then	
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Mirar...");
		
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Disparar Contra "+$nomeAlvo);
end

// Move-se aleatoriamente todo o momento
rule "MOVER-SE ALEATORIAMENTE"
	when
		HitByBulletEvent()
		EstadoRobot( distanceRemaining == 0 )
		$batalha: EstadoBatalha()
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 1));
		double anguloGiro = (360*Math.random() - 180);
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, anguloGiro, 1));
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, anguloGiro, 1));
		double avance = Math.min($batalha.getLarguraCampo(), $batalha.getAlturaCampo())*Math.random();
		insert(new Acao(Acao.AVANCAR, avance, 1));	
		System.out.println("> Mover aleatoriamente");
end

// Quando ocorre um choque com o muro: se movimenta para o lado oposto
// tem prioridade alta
rule "CHOQUE COM MURO"
	when
		HitWallEvent($anguloRelativo: bearing)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo), 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		System.out.println("> Choque com muro");
end

// Quando ocorre um choque com outro robo: mira nele
// tem prioridade alta
rule "CHOQUE COM ROBOT > MIRAR"
	when
		HitRobotEvent($nome: name, $anguloRelativo: bearing)
		$status : EstadoRobot()
	then
	   	insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo*1.50), 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, ($anguloRelativo - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($anguloRelativo - anguloRelativoRadar), 1));		
		System.out.println("> Choque com "+$nome+" > mirar");
end

// Quando ocorre choque com outro robo e ele já está na mira: atira e foge
// Tem prioridade alta
rule "CHOQUE COM ROBOT > DISPARAR E FUGIR"
   when
		HitRobotEvent($nome: name, $anguloRelativo: bearing)
		$status : EstadoRobot()                      
		eval (Math.abs($anguloRelativo - Util.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
   		insert(new Acao(Acao.GIRAR_TANQUE_DIR, -$anguloRelativo, 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Choque com "+$nome+" > tem mira > Disparar e fugir");
end