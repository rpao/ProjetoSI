package ProjetoSI;

import ProjetoSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;

query "consulta_acoes"
	acao: Acao()
end

declare Alvo
	nome: String
	x: double
	y: double
	distancia: double
end

rule "DEPURAR ACOES"
	when
		$acao: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2);
		System.out.println("> Depurar acoes por prioridade");
end

rule 'GIRAR RADAR'
	when
		not (exists ScannedRobotEvent())
		not (exists Alvo())
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 2));
		System.out.println("> Girar radar");
end

rule "CHOQUE COM MURO"
	when
		HitWallEvent($anguloRelativo: bearing)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo), 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		System.out.println("> Choque com muro");
end

rule "CHOQUE COM ROBOT > MIRAR"
	when
		HitRobotEvent($nome: name, $anguloRelativo: bearing)
		$status : EstadoRobot()
	then
	   	insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo*1.50), 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANO_DIR, ($anguloRelativo - anguloRelativoCano), 1));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($anguloRelativo - anguloRelativoRadar), 1));		
		System.out.println("> Choque com "+$nome+" > mirar");
end

rule "CHOQUE COM ROBOT > DISPARAR E FUGIR"
   when
		HitRobotEvent($nome: name, $anguloRelativo: bearing)
		$status : EstadoRobot()                      
		eval (Math.abs($anguloRelativo - Util.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
   		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo*1.50), 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 1));
		System.out.println("> Choque com "+$nome+" > tem mira > Disparar e fugir");
end

rule "MOVER-SE ALEATORIAMENTE"
	when
		EstadoRobot( distanceRemaining == 0 )
		$batalha: EstadoBatalha()
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 1));
		double anguloGiro = (360*Math.random() - 180);
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, anguloGiro, 1));
		insert(new Acao(Acao.GIRAR_CANO_DIR, anguloGiro, 1));
		double avance = Math.min($batalha.getLarguraCampo(), $batalha.getAlturaCampo())*Math.random();
		insert(new Acao(Acao.AVANCAR, avance, 1));	
		System.out.println("> Mover aleatoriamente");
end

rule "ESCOLHER ALVO"
	when
		not (exists Alvo())
		$alvoEscaneado: ScannedRobotEvent()
		$status : EstadoRobot()
	then
		Alvo alvo = new Alvo();
		
		double anguloAbsoluto = Util.anguloAbsoluto($status.getHeading(), $alvoEscaneado.getBearing());
		alvo.setNome($alvoEscaneado.getName());
		alvo.setX(Util.calcularX($status.getX(), anguloAbsoluto, $alvoEscaneado.getDistance()));                                            
		alvo.setY(Util.calcularX($status.getY(), anguloAbsoluto, $alvoEscaneado.getDistance()));
		alvo.setDistancia($alvoEscaneado.getDistance());
		insert(alvo);

		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 1));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 1));		
		System.out.println("> Alvo Selecionado: "+$alvoEscaneado.getName());
end

rule "LOCALIZAR ALVO"
	when
		$dadosAlvo: Alvo($nomeAlvo: nome)
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent(name == $nomeAlvo)
	then
		double anguloAbsoluto = Util.anguloAbsoluto($status.getHeading(), $alvoEscaneado.getBearing());
		$dadosAlvo.setX(Util.calcularX($status.getX(), anguloAbsoluto, $alvoEscaneado.getDistance()));                                            
		$dadosAlvo.setY(Util.calcularX($status.getY(), anguloAbsoluto, $alvoEscaneado.getDistance()));
		$dadosAlvo.setDistancia($alvoEscaneado.getDistance());
		
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 1));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 1));	
		System.out.println("> Localizar Alvo");
end

rule "DISPARAR"
   when
		$status : EstadoRobot()
		Alvo ($nomeAlvo: nome)
		ScannedRobotEvent(name == $nomeAlvo, $anguloRelativoAlvo: bearing)                       
		eval (Math.abs($anguloRelativoAlvo - Util.anguloRelativo($status.getHeading(), $status.getGunHeading())) <= 2)   
   then
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 1));
		System.out.println("> Disparando contra "+$nomeAlvo);
end

rule "ALVO DESTRUIDO"
	when
	   $alvo: Alvo ($nomeAlvo: nome)
	   RobotDeathEvent( name == $nomeAlvo )
	then 
	   retract($alvo);
	   System.out.println("> "+$nomeAlvo + " DESTRUIDO.");
end