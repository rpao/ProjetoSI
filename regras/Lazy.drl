package ProjetoSI;

import ProjetoSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;

// Consultar ações na lista de ações
query "consulta_acoes"
	acao: Acao()
end

// Excluí ações com prioridades conflitantes
rule "DEPURAR ACOES"
	when
		$acao: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2);
		System.out.println("> Depurar acoes por prioridade");
end

// Gira o radar quando não há envento escaneado ou alvo selecionado
rule 'GIRAR RADAR'
	when
		not (exists ScannedRobotEvent())
	then
		insert(new Acao(Acao.GIRAR_RADAR_DIR, 360, 5));
		System.out.println("> Girar radar");
end

// Dispara contra o alvo na mira
rule "DISPARAR"
   when
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent($nomeAlvo: name)
		eval (Util.NotFromTeam($nomeAlvo))
   then	
		double anguloRelativoCano = Util.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Util.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Acao(Acao.GIRAR_RADAR_DIR, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Mirar...");
		
		insert(new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Disparar Contra "+$nomeAlvo);
end

// Andar apenas quando for atingido e estiver com baixa energia
rule "FUGIR"
	when
		$status : EstadoRobot()		
		eval ($status.getEnergy() <= 20)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, 90, 5));
		insert(new Acao(Acao.AVANCAR, 100, 5));
		System.out.println("> Fugir...");
end