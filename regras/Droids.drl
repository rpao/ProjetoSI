package AGMR

import AGMR.*;
import robocode.*;
import robocode.ScannedRobotEvent;

// Consultar ações na lista de ações
query "consulta_acoes"
	acao: Acao()
end

// Ativo quando o líder morre, utilizado para ações independentes
declare StatusLider
	isDead: boolean
end

// Ação independente: Se algum robô morre, verifica se foi o líder
rule "Morte de Robot --> Verificar Lider Vivo"
	when
		not (exists(StatusLider()))
		$robotDeath: RobotDeathEvent()
		eval(Util.isLeader($robotDeath))
	then
		System.out.println("> LIDER IS DEAD X__X");
		StatusLider statusLider = new StatusLider();
		statusLider.setIsDead(true);
		insert(statusLider);
end

// Ação independente: Depurar ações por prioridade
rule "Mais de uma ação ao mesmo tempo --> Escolhe a de maior prioridades"
	when
		$acao1: Acao($tipo: tipo, $prioridade1: prioridade)
		$acao2: Acao(tipo==$tipo, $prioridade2: prioridade)
		eval ($prioridade1 > $prioridade2)
	then
		retract($acao2); 
		System.out.println("Depurar Acoes");
end

// Ação independente: Tratar mensagem recebida
// Ação dependente: realizar ação conforme mensagem recebida
rule "Messagem Recebida"
	when
		$status: EstadoRobot()
		$messageEvent: MessageEvent()
	then
		double angulo = Util.recuperarCoordenada($status, $messageEvent);
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, angulo, 5));
		insert (new Acao(Acao.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("Ordem do Lider -> Disparar");
end

// Ação independente: Tratar choque com outro robô
rule "Bateu em outro robo --> Retrocede 200 pixels"
	when
		HitRobotEvent($nome: name, $anguloRelativo: bearing)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo), 6));
		insert(new Acao(Acao.RETROCEDER, 200, 5));
		System.out.println("Choque Com outro Robo");
end

// Ação independente: Tratar choque com o muro
rule "Bateu no muro --> Retrocede 200 pixels"
	when
		HitWallEvent($anguloRelativo: bearing)
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (- $anguloRelativo), 6));
		insert(new Acao(Acao.AVANCAR, 200, 5));
		System.out.println("Choque Com Muro");
end

// Ação independente: Movimento aleatório
rule "Parado --> Movimento Aleatório"
	when
		EstadoRobot( distanceRemaining == 0 )
		$batalha: EstadoBatalha()
		not (exists(HitRobotEvent()))
		not (exists(HitWallEvent()))
	then
		insert(new Acao(Acao.GIRAR_TANQUE_DIR, (360*Math.random() - 180), 2));
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, (360*Math.random() - 180), 2));
		double avance = Math.min($batalha.getLarguraCampo(), $batalha.getAlturaCampo())*Math.random();
		insert(new Acao(Acao.AVANCAR, avance, 2));
		System.out.println("Movimento Aleatorio");
end

// Ação independente: Atirar aleatoriamente
rule "Atirar Aleatoriamente"
	when 
		EstadoRobot($heading: heading, $gunHeading: gunHeading)
		exists(StatusLider())
	then
	
		double targetAngle = $heading - (360 * Math.random())%360;
		double bulletPower = Math.max(0.1, Math.random() * 3.0);
		double escapeAngle = Math.asin(8/ Rules.getBulletSpeed(bulletPower));
		double randomAimOffset = -escapeAngle + Math.random() * 2 * escapeAngle;
		double headOnTargeting = targetAngle - $gunHeading;
		
		insert(new Acao(Acao.GIRAR_CANHAO_DIR, headOnTargeting + randomAimOffset, 1));
		insert(new Acao(Acao.DISPARAR, bulletPower, 1));
		System.out.println("Tiro Aleatorio");
end