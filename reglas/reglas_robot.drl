package RobocodeSI
import RobocodeSI.*;
import robocode.*;
import robocode.ScannedRobotEvent;
import robocode.util.Utils;

query "consulta_acciones"
  accion: Accion()
end

declare Victima
   nombre: String
   x: double
   y: double
   distancia: double
end

rule "Morri"
when
	RobotDeathEvent()
then
	insert(new Accion(Accion.SEND_MESSAGE, 5000, 6));
end

/**
rule "Messagem Recebida -->  Robot"
when
	$messageEvent: MessageEvent()
then
	System.out.println("Robot Mensagem Recebida =" + $messageEvent.getMessage() + " | " $messageEvent.getSender);
end
**/

rule "Mais de uma ação ao mesmo tempo --> Escolhe a de maior prioridades"
when
	$accion1: Accion($tipo: tipo, $prioridad1: prioridad)
	$accion2: Accion(tipo==$tipo, $prioridad2: prioridad)
	eval ($prioridad1 > $prioridad2)
then
    retract($accion2);     // Elimina la accion menos prioritaria 
    System.out.println("Depurar Acoes");
end

rule "Inimigo Novo Escaneado --> Adiciona robo a lista de robos"
	when
		$roboEscaneado: ScannedRobotEvent()
		$batalha: EstadoBatalla()
	then
		$batalha.addRoboEscaneado($roboEscaneado);
		System.out.println("Inimigo Novo Escaneado");
end

rule "Bateu em outro robo --> Retrocede 200 pixels"
when
   HitRobotEvent($nombre: name, $anguloRelativo: bearing)
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo), 6));
   insert(new Accion(Accion.RETROCEDER, 200, 5));
   System.out.println("Choque Com outro Robo");
end

rule "Bateu no muro --> Retrocede 200 pixels"
when
   HitWallEvent($anguloRelativo: bearing)
then
   insert(new Accion(Accion.GIRAR_TANQUE_DER, (- $anguloRelativo), 6));
   insert(new Accion(Accion.AVANZAR, 200, 5));
   System.out.println("Choque Com Muro");
end

rule "[Stop And Go Movement] Se está parado e inimigo atirou --> Avançar"
	when
		$roboEscaneado: ScannedRobotEvent()
		$batalha: EstadoBatalla()
		eval($batalha.hasRobotEscaneado($roboEscaneado))
		EstadoRobot (distanceRemaining == 0)
		eval($batalha.getRoboInimigo($roboEscaneado).getEnergy() > $roboEscaneado.getEnergy());
		
	then
		
		double avance = Auxiliar.movementStopAndGo($batalha.getRoboInimigo($roboEscaneado).getEnergy() - $roboEscaneado.getEnergy());
		insert(new Accion(Accion.AVANZAR, avance, 4));
		System.out.println("STOP AND GO");
end

rule "Se não existem robos próximos --> Girar o radar"
when
	not (exists ScannedRobotEvent())
	not (exists Victima())
	$batalla: EstadoBatalla()
then
	insert (new Accion(Accion.GIRAR_RADAR_DER, 360, 3));
	$batalla.cleanRoboEscaneado();
	System.out.println("Girar Radar");
	
end

rule "Parado --> Movimento Aleatório"
when
  EstadoRobot( distanceRemaining == 0 )
  $batalla: EstadoBatalla()
  not (exists(HitRobotEvent()))
  not (exists(HitWallEvent()))
then
  insert(new Accion(Accion.GIRAR_RADAR_DER, 360, 2));
  insert(new Accion(Accion.GIRAR_TANQUE_DER, (360*Math.random() - 180), 2));
  insert(new Accion(Accion.GIRAR_CANON_DER, (360*Math.random() - 180), 2));
  double avance = Math.min($batalla.getAnchoCampo(), $batalla.getAltoCampo())*Math.random();
  insert(new Accion(Accion.AVANZAR, avance, 2));
  System.out.println("Movimento Aleatorio");
end

rule "DISPARAR"
   when
		$status : EstadoRobot()
		$alvoEscaneado: ScannedRobotEvent(distance <= 200)
   then	
		double anguloRelativoCano = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Accion(Accion.GIRAR_CANON_DER, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Accion(Accion.GIRAR_RADAR_DER, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Mirar...");
		
		insert(new Accion(Accion.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Disparar Contra ");
end

rule "DISPARAR com inimigo unico"
   when
		$status : EstadoRobot()
		EstadoBatalla(numeroEnemigos <= 2)
		$alvoEscaneado: ScannedRobotEvent()
   then	
		double anguloRelativoCano = Auxiliar.anguloRelativo($status.getHeading(), $status.getGunHeading());
		insert(new Accion(Accion.GIRAR_CANON_DER, ($alvoEscaneado.getBearing() - anguloRelativoCano), 5));
		double anguloRelativoRadar =  Auxiliar.anguloRelativo($status.getHeading(), $status.getRadarHeading());
		insert(new Accion(Accion.GIRAR_RADAR_DER, ($alvoEscaneado.getBearing() - anguloRelativoRadar), 5));	
		System.out.println("> Mirar...");
		
		insert(new Accion(Accion.DISPARAR, Math.min(Rules.MAX_BULLET_POWER, 0.10*$status.getEnergy()), 5));
		System.out.println("> Disparar Contra ");
end
